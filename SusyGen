#!/usr/bin/env python3

import os
import os.path
import io
import tempfile
import subprocess
import difflib
import json
import re
import sys
import urllib.request
import mimetypes
import datetime
import stat
import shutil
import time
import threading
import math

CONFIG = None

################################################################################
# Log and Control

fail = False

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def print_header(msg):
    global fail
    if fail:
        print("\n" + bcolors.FAIL + "Erros encontrados" + bcolors.ENDC)
        exit()
    print(bcolors.HEADER + "---------------------------------")
    print(msg + bcolors.ENDC)

def print_ok(msg=" OK "):
    print(bcolors.OKBLUE + msg + bcolors.ENDC)

def print_error(msg=None):
    global fail
    fail = True
    if msg:
        print(bcolors.FAIL + "ERRO -", msg + bcolors.ENDC)
    else:
        print(bcolors.FAIL + "ERRO" + bcolors.ENDC)

def print_warning(msg):
    print(bcolors.WARNING + msg + bcolors.ENDC)

def print_check(msg):
    print(msg+": ", end="")

################################################################################
# Defines

CC = ["gcc"]
CPPFLAGS = []
CFLAGS = ["-O3", "-std=c99", "-Werror", "-Wall", "-Wextra", "-pedantic", "-Wunused-result", "-Wno-error=unused-result"]
LDFLAGS = []
LDLIBS = ["-lm"]

HTML_HEADER = """<!DOCTYPE html>
<html>
<head>
    <meta http-equiv='content-type' content='text/html; charset=utf-8'>
    <title>Laboratório !ID!</title>
        <meta name='viewport' content='width=device-width, initial-scale=1'>
    <link href='https://fonts.googleapis.com/css?family=Noto+Sans:400,700,400italic' rel='stylesheet' type='text/css'>
    <link rel='stylesheet' href='https://sindresorhus.com/github-markdown-css/github-markdown.css'>
    <style>
        .markdown-body {
        box-sizing: border-box;
        min-width: 200px;
        max-width: 980px;
        margin: 0 auto;
        padding: 45px;
        font-family: 'Noto Sans', sans-serif;
        }
        .markdown-body h6 { margin-bottom: 0; }
        .markdown-body h6 + ul li {
        display: inline-block;
        width: 100%;
        max-width: 426px;
        vertical-align: top;
        }
    </style>
</head>
<body>
    <article class='markdown-body'>
"""
HTML_TAIL = """
    </article>
</body>
</html>
"""

################################################################################
# Timer Process

class TimerPopen:
    def __init__(self, *args, **kwargs):
        self.args = args
        self.kwargs = kwargs
        self.process = None
        self.elapsed = 0
        self.returncode = -1

    def run(self):
        self.thread = threading.Thread(target=self.processthread)
        self.thread.start()

    def wait(self):
        self.thread.join()

    def processthread(self):
        start = time.time()

        self.process = subprocess.Popen(*self.args, **self.kwargs)
        try:
            self.process.wait(timeout=10)
        except TimeoutExpired:
            self.process.kill()
            self.process.wait()

        done = time.time()
        self.elapsed = done - start
        self.returncode = self.process.returncode


################################################################################
# Languages

class Language:
    def __init__(self, srcdir, tmpdir, config):
        self.srcdir = srcdir
        self.tmpdir = tmpdir
        self.config = config
        self.source = list()
    def compile(self):
        pass
    def run(self, stdin, stdout, stderr, args):
        pass
    def copy(self, target):
        for file in self.source:
            shutil.copy(os.path.join(self.srcdir, file), target)

class LanguageC(Language):
    def __init__(self, srcdir, tmpdir, config):
        Language.__init__(self, srcdir, tmpdir, config)
        global CONFIG
        self.executable = os.path.join(tmpdir, CONFIG["submissions"]["basename"])
        self.header = list()
    def compile(self):
        Language.compile(self)
        print_check("Compilando C")

        self.source = list()
        for file in os.listdir(self.srcdir):
            if file.endswith(".c"):
                self.source.append(file)
            elif file.endswith(".h"):
                self.header.append(file)
        if not self.source:
            print_error("Falta código da solução.")

        command = list()
        command.extend(CC)
        command.extend(CPPFLAGS)
        command.extend(CFLAGS)
        command.extend(LDFLAGS)
        command.extend(self.source)
        command.extend(LDLIBS)
        command.append("-o"+self.executable)

        comp = subprocess.Popen(command, cwd=self.srcdir, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
        comp.wait()
        if comp.returncode:
            print_error("Compilação da solução falhou.")
            print(str(comp.stdout.read(), 'utf-8'))
        print_ok()
    def run(self, stdin, stdout, stderr, args):
        Language.run(self, stdin, stdout, stderr, args)
        Args = [self.executable]
        if args:
            Args.extend(args)
        p = TimerPopen(Args, stdin=stdin, stdout=stdout, stderr=stderr)
        p.run()
        return p
    def copy(self, target):
        Language.copy(self, target)
        for file in self.header:
            shutil.copy(os.path.join(self.srcdir, file), target)


class LanguagePY3(Language):
    def __init__(self, srcdir, tmpdir, config):
        Language.__init__(self, srcdir, tmpdir, config)
        global CONFIG
        self.executable = CONFIG["submissions"]["basename"]+".py"
        if "main" in self.config:
            self.executable = self.config["main"]

    def compile(self):
        Language.compile(self)
        print_check("Compilando PY3")
        self.source = list()
        for file in os.listdir(self.srcdir):
            if file.endswith(".py"):
                self.source.append(file)
                shutil.copy(os.path.join(self.srcdir, file), self.tmpdir)
        if not self.source:
            print_error("Falta código da solução.")
        elif self.executable not in self.source:
            print_error("Falta código da main: {0:s}".format(self.executable))
        else:
            print_ok()
    def run(self, stdin, stdout, stderr, args):
        Language.run(self, stdin, stdout, stderr, args)
        Args = ["python3", os.path.join(self.tmpdir, self.executable)]
        if args:
            Args.extend(args)
        p = TimerPopen(Args, stdin=stdin, stdout=stdout, stderr=stderr)
        p.run()
        return p

def getLanguage(lang, srcdir, tmpdir, config):
    L = "Language" + lang
    if L not in globals():
        print_error("Language error: " + lang)
        return
    Lang = globals()[L]

    if not os.path.isdir(tmpdir):
        os.mkdir(tmpdir)

    return Lang(srcdir, tmpdir, config)


################################################################################
# Init

# Get the directory of this script
script_dir = os.path.dirname(os.path.realpath(__file__))
cur_dir = os.getcwd()

# Arguments
import argparse
parser = argparse.ArgumentParser(description='Gerador do enunciado para o Susy.')
parser.add_argument('directory', metavar='directory', type=str, nargs='?',
                    default=cur_dir,
                    help='Diretório do enunciado')
parser.add_argument('--keep', action='store_true',
                    help='Não excluir arquivos temporários')
parser.add_argument('--new', action='store_true',
                    help='Sobreescreve testes com gerador')
parser.add_argument('--seq', action='store_true',
                    help='Executar sequencialmente')
args = parser.parse_args()

################################################################################
# Configs

workdir = os.path.realpath(args.directory)
print_header("Trabalhando o Enunciado")
print_ok(workdir)

print_check("Configuração")
config_file = open(os.path.join(workdir, 'config.json'))
CONFIG = json.load(config_file)
config_file.close()
print_ok()

#Default Values
if "limits" not in CONFIG:
    CONFIG["limits"] = dict()
if "cpu" not in CONFIG["limits"]:
    CONFIG["limits"]["cpu"] = 5

cmd = dict()
cmd["id"] = CONFIG["task"]["id"]
CONFIG["submissions"]["basename"] = CONFIG["submissions"]["basename"] % cmd

# Detecting testes
tests = dict()

tests["open"] = list()
tests["gopen"] = list()
d = os.path.join(workdir, "tests", "open")
if os.path.isdir(d):
    for file in os.listdir(d):
        filename, file_extension = os.path.splitext(file)
        if not filename.startswith("arq"):
            print("Ignoring open test:", file)
        filename = filename[3:]
        if file_extension == ".pre":
            tests["gopen"].append(filename)
        elif file_extension == ".in":
            tests["open"].append(filename)
    if args.new:
        tests["open"] = [name for name in tests["open"] if name not in tests["gopen"]]
    else:
        tests["gopen"] = [name for name in tests["gopen"] if name not in tests["open"]]

tests["hidden"] = list()
tests["ghidden"] = list()
d = os.path.join(workdir, "tests", "hidden")
if os.path.isdir(d):
    for file in os.listdir(d):
        filename, file_extension = os.path.splitext(file)
        if not filename.startswith("arq"):
            print("Ignoring hidden test:", file)
        filename = filename[3:]
        if filename in tests["open"] or filename in tests["gopen"]:
            print("Atenção: O teste fechado", filename, "será inogrado.")
        elif file_extension == ".pre":
            tests["ghidden"].append(filename)
        elif file_extension == ".in":
            tests["hidden"].append(filename)
    if args.new:
        tests["hidden"] = [name for name in tests["hidden"] if name not in tests["ghidden"]]
    else:
        tests["ghidden"] = [name for name in tests["ghidden"] if name not in tests["hidden"]]

for key, value in tests.items():
    value.sort()
#print(tests)
print("Testes estáticos encontrados")
print_check("Abertos")
print_ok(",".join(tests["open"]))
print_check("Fechados")
print_ok(",".join(tests["hidden"]))

print("Testes encontrados")
print_check("Abertos")
print_ok(",".join(tests["gopen"]))
print_check("Fechados")
print_ok(",".join(tests["ghidden"]))

################################################################################
# Temporary Directory

print_header("Diretório Temporário")
if args.keep:
    tmpdir = tempfile.gettempdir()
    tmpdir = os.path.join(tmpdir, "SusyTools_" + CONFIG["task"]["id"])
    if os.path.isdir(tmpdir):
        shutil.rmtree(tmpdir, ignore_errors=True)
    os.mkdir(tmpdir)
    print_ok(tmpdir)
    print_warning("Não será excluído")
else:
    tmpdir_obj = tempfile.TemporaryDirectory(prefix="SusyTools_")
    tmpdir = tmpdir_obj.name
    print_ok(tmpdir)

# Creator
if tests["gopen"] or tests["ghidden"]:
    gen = "PY3"
    gen_data = None
    if "generator" in CONFIG:
        if "language" in CONFIG["generator"]:
            gen = CONFIG["generator"]["language"]
        gen_data = CONFIG["generator"]

    gen_src = os.path.join(workdir, "tests", "generator")
    gen_tmp = os.path.join(tmpdir, "generator")
    Gen = getLanguage(gen, gen_src, gen_tmp, gen_data)
    Gen.compile()

# Tests

d = os.path.join(tmpdir, "tests")
os.mkdir(d)

if tests["open"] or tests["hidden"]:
    print_check("Copiando testes estáticos")
    for type in ["open", "hidden"]:
        target = os.path.join(workdir, "tests", type)
        for file in tests[type]:
            filename = os.path.join(target, "arq" + file + ".in")
            shutil.copy(filename, d)
            filename = os.path.join(target, "arq" + file + ".out")
            if os.path.isfile(filename):
                shutil.copy(filename, d)
            filename = os.path.join(target, "arq" + file + ".err")
            if os.path.isfile(filename):
                shutil.copy(filename, d)
    print_ok()

def wait_gentest(p, data):
    print_check("Teste " + data["filename"])
    p.wait()
    if p.returncode:
        print_error()
    else:
        print_ok()
    print(str(p.process.stdout.read(), 'utf-8'))

def run_gentest(t, filename, wait_list):
    global Gen
    prefile = os.path.join(workdir, "tests", t, "arq" + filename + ".pre")
    infile = os.path.join(d, "arq" + filename + ".in")
    outfile = os.path.join(d, "arq" + filename + ".out")
    errfile = os.path.join(d, "arq" + filename + ".err")
    p = Gen.run(None, subprocess.PIPE, subprocess.STDOUT, [prefile, infile, outfile, errfile])

    data = dict()
    data["filename"] = filename
    data["pre"] = prefile
    data["in"] = infile
    data["out"] = outfile
    data["err"] = errfile
    if args.seq:
        wait_gentest(p, data)
    else:
        wait_list.append((p, data))


if tests["gopen"] or tests["ghidden"]:
    print_header("Gerando testes")

    wait_list = list()

    for filename in tests["gopen"]:
        run_gentest("open", filename, wait_list)
        tests["open"].append(filename)
    tests["open"].sort()

    for filename in tests["ghidden"]:
        run_gentest("hidden", filename, wait_list)
        tests["hidden"].append(filename)
    tests["hidden"].sort()

    for p in wait_list:
        wait_gentest(*p)

################################################################################
# Solution

print_header("Solução")

x = os.path.join(tmpdir, "solution")
os.mkdir(x)

langs = None
if "languages" in CONFIG["solution"]:
    langs = CONFIG["solution"]["languages"].keys()
if not langs:
    langs = [CONFIG["solution"]["language"]]

Langs = dict()
for lang in langs:
    L = "Language" + lang
    if L not in globals():
        print_error("Language error: " + lang)
        continue
    Lang = globals()[L]

    src = os.path.join(workdir, "solution", lang)
    if not os.path.isdir(src):
        src = os.path.join(workdir, "solution")
    tmp = os.path.join(tmpdir, "solution", lang)
    os.mkdir(tmp)

    dt = None
    if "languages" in CONFIG["solution"] and lang in CONFIG["solution"]["languages"]:
        dt = CONFIG["solution"]["languages"][lang]

    Langs[lang] = Lang(src, tmp, dt)
    Langs[lang].compile()


################################################################################
# Run tests

def wait_test(p, data):
    print_check("Teste "+data["filename"])
    p.wait()

    data["stdin"].close()
    data["stdin"] = data["stdin"].name

    data["stdout"].close()
    data["stdout"] = data["stdout"].name

    data["stderr"].close()
    data["stderr"] = data["stderr"].name

    if p.returncode:
        print_error("Erro na execução")
        return

    stdout = os.path.join(data["swd"], "arq" + data["filename"] + ".out")
    if os.path.isfile(stdout):
        stdout2 = open(data["stdout"])
        stdout = open(stdout)
        diff = list(difflib.unified_diff(stdout.readlines(), stdout2.readlines(), fromfile='Correto', tofile='Executado'))
        stdout.close()
        stdout2.close()

        if diff:
            print_error("Diferenças encontradas no stdout")
            sys.stdout.writelines(diff)
            fail = True
            return
    else:
        shutil.copy(data["stdout"], stdout)

    stderr = os.path.join(data["swd"], "arq" + data["filename"] + ".err")
    if os.path.isfile(stderr):
        stdout2 = open(data["stderr"])
        stdout = open(stderr)
        diff = list(difflib.unified_diff(stdout.readlines(), stdout2.readlines(), fromfile='Correto', tofile='Executado'))
        stdout.close()
        stdout2.close()

        if diff:
            print_error("Diferenças encontradas no stderr")
            sys.stdout.writelines(diff)
            return
    else:
        shutil.copy(data["stderr"], stderr)

    elapsed = math.ceil(10 * p.elapsed)
    if elapsed > data["config"]["limits"]["cpu"]:
        data["config"]["limits"]["cpu"] = elapsed
        print_warning(" OK {0:.3f}s".format(p.elapsed))
    else:
        print_ok(" OK {0:.3f}s".format(p.elapsed))


d = os.path.join(tmpdir, "tests")
for lang, L in Langs.items():
    print_header("Rodando os testes para solução em "+lang)
    wait_list = list()
    for filename in sorted(tests["open"]+tests["hidden"]):
            ld = os.path.join(d, "arq" + filename + "_" + lang)
            os.mkdir(ld)
            stdin = open(os.path.join(d, "arq" + filename + ".in"))
            stdout = open(os.path.join(ld, "arq" + filename + ".out"), 'w')
            stderr = open(os.path.join(ld, "arq" + filename + ".err"), 'w')

            p = L.run(stdin, stdout, stderr, None)

            data = dict()
            data["filename"] = filename
            data["swd"] = d
            data["cwd"] = ld
            data["stdin"] = stdin
            data["stdout"] = stdout
            data["stderr"] = stderr
            data["config"] = CONFIG
            if args.seq:
                wait_test(p, data)
            else:
                wait_list.append((p, data))


    for p in wait_list:
        wait_test(*p)

# Checando resultados:
print_header("Limites")

print_check("Verificando limite de CPU")
if CONFIG["limits"]["cpu"] > 10:
    print_error("{0:d}s! Limite do Susy: {1:d}s".format(CONFIG["limits"]["cpu"], 10))
else:
    print_ok(" OK {0:d}s".format(CONFIG["limits"]["cpu"]))

# Salvando Testes
if args.new:
    print_header("Salvando Testes")
    if tests["gopen"]:
        print_check("Copiando testes abertos")
        target = os.path.join(workdir, "tests", "open")
        for file in tests["gopen"]:
            shutil.copy(os.path.join(d, "arq" + file + ".in"), target)
            shutil.copy(os.path.join(d, "arq" + file + ".out"), target)
            shutil.copy(os.path.join(d, "arq" + file + ".err"), target)
        print_ok()
    if tests["ghidden"]:
        print_check("Copiando testes fechados")
        target = os.path.join(workdir, "tests", "hidden")
        for file in tests["ghidden"]:
            shutil.copy(os.path.join(d, "arq" + file + ".in"), target)
            shutil.copy(os.path.join(d, "arq" + file + ".out"), target)
            shutil.copy(os.path.join(d, "arq" + file + ".err"), target)
        print_ok()

# Check Images

print_header("Enunciado")
print_check("Imagens")
imgs = list()
mimetypes.init()
for filename in os.listdir(workdir):
    m = mimetypes.guess_type(filename)
    if m[0] and m[0].startswith("image/"):
        imgs.append(filename)
print_ok(",".join(imgs))

# Markdown

load_test_re = re.compile('(?P<pre>.*)!TESTE!(?P<file>\d+)!(?P<pos>.*)')
include_re = re.compile('(?P<pre>.*)include\(\"(?P<file>[^\"]+)\"\)(?P<pos>.*)')
def parse_md(input, output):
    while input:
        line = input.pop(0)

        m = load_test_re.match(line)
        if m:
            line = m.group('pre')
            input.insert(0,m.group('pos'))
            input.insert(0,"    ```\n\n")
            input.insert(0,'include("tests/arq'+m.group('file')+'.out")\n')
            input.insert(0,"    ```\n")
            input.insert(0,"* [Saída](dados/arq"+m.group('file')+".res)\n\n")
            input.insert(0,"    ```\n\n")
            input.insert(0,'include("tests/arq'+m.group('file')+'.in")\n')
            input.insert(0,"    ```\n")
            input.insert(0,"* [Entrada](dados/arq"+m.group('file')+".in)\n\n")
            input.insert(0,"###### Teste "+m.group('file')+"\n\n")

        m = include_re.match(line)
        if m:
            line = m.group('pre')
            input.insert(0,m.group('pos'))
            f = os.path.join(tmpdir, m.group('file'))
            if not os.path.isfile(f):
                f = os.path.join(workdir, m.group('file'))
            f = open(f)
            flines = f.readlines()
            f.close()
            while flines:
                input.insert(0, flines.pop())

        output.append(line)

print_check("Carregando Markdown")
md = os.path.join(workdir, "enunciado.md")
md = open(md)
mdlines = md.readlines()
md.close()
print_ok()

print_check("Parseando Markdown")
mdo = list()
parse_md(mdlines, mdo)
print_ok()

print_check("Salvando Markdown")
md = os.path.join(tmpdir, "enunciado.md")
md = open(md, "w")
md.writelines(mdo)
md.close()
md = ''.join(mdo)
print_ok()

print_check("Markdown para HTML")
req = urllib.request.Request(url='https://api.github.com/markdown/raw',
    data=md.encode('utf-8'))
req.add_header('Content-Type', 'text/x-markdown')

html = ""
with urllib.request.urlopen(req) as response:
    html = response.read().decode('utf-8')
    md = os.path.join(tmpdir, "enunciado.html")
    md = open(md, "w")
    md.write(HTML_HEADER)
    md.write(html)
    md.write(HTML_TAIL)
    md.close()
md = HTML_HEADER.splitlines(keepends=True)
md.extend(html.splitlines(keepends=True))
md.extend(HTML_TAIL.splitlines(keepends=True))
html = md
print_ok()

cmd_re = re.compile('(?P<pre>.*)!(?P<cmd>[A-Z_]+)!(?P<pos>.*)')
def parse_html(input, output, data):
    while input:
        line = input.pop(0)

        m = cmd_re.match(line)
        if m:
            line = ""
            tag = m.group('cmd').lower()
            if tag in data:
                input.insert(0,m.group('pos'))
                input.insert(0,data[tag])
                input.insert(0,m.group('pre'))
            else:
                input.insert(0,"!"+m.group('pos'))
                input.insert(0,m.group('cmd'))
                input.insert(0,m.group('pre')+"!")
            continue

        output.append(line)

def write_cfg(filename, data):
    cfg = '''##||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||

# Tarefa

VERSION: 9.6   # Versão do sistema
TASKID: %(id)s   # Identificação da tarefa (tratada como identificador)
TASK_COMMENT: %(title)s  # Título da tarefa

# Data de início do prazo de submissão
START_TIME: %(start_time)s
START_DATE: %(start_date)s
# Data de fim do prazo de submissão
FINAL_TIME: %(final_time)s
FINAL_DATE: %(final_date)s

PROCESSOR: [%(languages)s]  # Processador a ser usado na instalação da tarefa
IMPLEMENTATION_PROCESSOR: %(language)s
MAIN_PROG_NAME: %(basename)s
SELECT_PROCESSOR: False
SUBMIT_FILES: ["*"]     # Submissão de um único arquivo, com nome próprio
MAX_SUBMISSIONS: %(max_submissions)s
CORE_LIMIT: 0 # Tamanho máximo do arquivo core (bytes) 0/0
CPU_LIMIT: %(cpu_limit)s  # Tempo maximo de processamento em segundos 1/10
DATA_LIMIT: %(data_limit)s # Limite de tamanho do segmento de dados (kbytes) 100/1000
FILE_LIMIT: %(file_limit)s # Tamanho máximo de arquivos gerados (blocos) 100/2000
NOFILE_LIMIT: 10 # Número máximo de arquivos abertos num programa submetido 10/20
NPROC_LIMIT: 10 # Número máximo de processos criados num programa submetido 10/10
STACK_LIMIT: %(stack_limit)s  # Tamanho máximo da pilha de execução (bytes) 1000/10000

TEST_CASES:        [%(open_tests)s] # Testes abertos
HIDDEN_TEST_CASES: [%(hidden_tests)s]  # Testes fechados

EXHIBIT_AUX_FILES: [%(aux_files)s]
SYM_LINKS: [%(sym_links)s] # Aux presentes na execução

KEEP: %(keep)s  # Número de submissões a preservar de cada aluno
TASK_DESCRIPTION_PAGE: enunciado.html

##||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
''' % data
    filename.write(cfg)

print_check("HTML de referência")
cmd = dict()
cmd["id"] = CONFIG["task"]["id"]
cmd["max_submissions"] = str(CONFIG["submissions"]["maximum"])
cmd["deadline"] = "%d/%m/%Y %H:%M:%S"
cmd["title"] = CONFIG["task"]["title"]
cmd["basename"] = CONFIG["submissions"]["basename"] % cmd
rhtml = list()
parse_html(html[:], rhtml, cmd)
desc = open(os.path.join(workdir, "enunciado.html"), "w")
desc.writelines(rhtml)
desc.close()
print_ok()

rdir = os.path.join(workdir, "releases")
shutil.rmtree(rdir, ignore_errors=True)
os.mkdir(rdir)
for release in CONFIG["releases"]:
    print_header("Instalador "+release["name"])
    print_check("Criando diretório")
    d = os.path.join(tmpdir, release["name"])
    rdirr = os.path.join(rdir, release["name"])
    try:
        os.mkdir(d)
        os.mkdir(rdirr)
    except FileExistsError:
        print_error("Diretório " + d +" já existe")
        continue

    ds = os.path.join(d, CONFIG["task"]["id"])
    os.mkdir(ds)
    print_ok()

    release["start_time"] = datetime.datetime.strptime(release["start_time"], "%Y-%m-%d %H:%M:%S")
    release["end_time"] = datetime.datetime.strptime(release["end_time"], "%Y-%m-%d %H:%M:%S")

    if "description" not in release or release["description"]:
        print_check("Editando HTML")
        cmd = dict()
        cmd["id"] = CONFIG["task"]["id"]
        cmd["max_submissions"] = str(CONFIG["submissions"]["maximum"])
        cmd["deadline"] = release["end_time"].strftime("%d/%m/%Y %H:%M:%S")
        cmd["title"] = CONFIG["task"]["title"]
        cmd["basename"] = CONFIG["submissions"]["basename"] % cmd
        rhtml = list()
        parse_html(html[:], rhtml, cmd)
        print_ok()

        print_check("Salvando HTML")
        desc = open(os.path.join(ds, "enunciado.html"), "w")
        desc.writelines(rhtml)
        desc.close()
        for img in imgs:
            shutil.copy(os.path.join(workdir, img), ds)
        print_ok()

    print_check("Copiando testes")
    dt = os.path.join(ds, "dados")
    os.mkdir(dt)
    if "open_tests" not in release or release["open_tests"]:
        for filename in tests["open"]:
            shutil.copy(os.path.join(tmpdir, "tests", "arq" + filename + ".in"), dt)
    if "hidden_tests" not in release or release["hidden_tests"]:
        for filename in tests["hidden"]:
            shutil.copy(os.path.join(tmpdir, "tests", "arq" + filename + ".in"), dt)
    print_ok()

    saux = os.path.join(workdir, "aux")
    daux = os.path.join(ds, "aux")
    os.mkdir(daux)
    exib_aux = list()
    if os.path.isdir(saux) and ("aux" not in release or release["aux"] != False):
        print_check("Copiando Auxiliares")
        for filename in os.listdir(saux):
            shutil.copy(os.path.join(saux, filename), daux)
            if "aux" in release and release["aux"] == True:
                exib_aux.append(filename)
        print_ok()

    print_check("Copiando solução")
    dsols = os.path.join(ds, "sols")
    os.mkdir(dsols)
    sym_links = list()
    for lang, L in Langs.items():
        if lang == CONFIG["solution"]["language"]:
            L.copy(dsols)
        if L.config and "public" in L.config:
            for filename in L.config["public"]:
                shutil.copy(os.path.join(workdir, "solution", lang, filename), daux)
                sym_links.append(filename)
                if "aux" in release and release["aux"] == True:
                    exib_aux.append(filename)

    print_ok()

    print_check("Gerando tarefa.cfg")
    cfgd = dict()
    cfgd["id"] = CONFIG["task"]["id"]
    if release["title"]:
        cfgd["title"] = CONFIG["task"]["title"]
    else:
        cfgd["title"] = "Unknown"
    cfgd["start_time"] = release["start_time"].strftime("%H:%M:%S")
    cfgd["start_date"] = release["start_time"].strftime("%Y/%m/%d")
    cfgd["final_time"] = release["end_time"].strftime("%H:%M:%S")
    cfgd["final_date"] = release["end_time"].strftime("%Y/%m/%d")
    cfgd["hidden_tests"] = ""
    if "hidden_tests" not in release or (release["hidden_tests"] and release["hidden_tests"] != "open"):
        if "open_tests" in release and release["open_tests"] == "hidden":
            cfgd["hidden_tests"] = '"' + '","'.join(x for x in sorted(tests[ "open"] +tests["hidden"])) + '"'
        else:
            cfgd["hidden_tests"] = '"' + '","'.join(x for x in tests["hidden"]) + '"'
    cfgd["open_tests"] = ""
    if "open_tests" not in release or (release["open_tests"] and release["open_tests"] != "hidden"):
        if "hidden_tests" in release and release["hidden_tests"] == "open":
            cfgd["open_tests"] = '"' + '","'.join(x for x in sorted(tests[ "open"] +tests["hidden"])) + '"'
        else:
            cfgd["open_tests"] = '"' + '","'.join(x for x in tests["open"]) + '"'
    cfgd["language"] = CONFIG["solution"]["language"]
    cfgd["languages"] = '"' + '","'.join(x for x in CONFIG["submissions"]["languages"].keys()) + '"'
    cfgd["cpu_limit"] = str(CONFIG["limits"]["cpu"])
    cfgd["data_limit"] = str(CONFIG["limits"]["data"])
    cfgd["file_limit"] = str(CONFIG["limits"]["file"])
    cfgd["stack_limit"] = str(CONFIG["limits"]["stack"])
    cfgd["keep"] = str(CONFIG["submissions"]["keep"])
    cfgd["max_submissions"] = str(CONFIG["submissions"]["maximum"])
    cfgd["basename"] = CONFIG["submissions"]["basename"] % cfgd
    cfgd["sym_links"] = ''
    if sym_links:
        cfgd["sym_links"] = '"' + '","'.join(x for x in sym_links) + '"'
    cfgd["aux_files"] = ''
    if exib_aux:
        cfgd["aux_files"] = '"' + '","'.join(x for x in exib_aux) + '"'

    cfg = open(os.path.join(ds, "tarefa.cfg"), "w")
    write_cfg(cfg, cfgd)
    cfg.close()
    print_ok()

    print_check("Compactando")
    shutil.make_archive(os.path.join(rdirr, str(CONFIG["task"]["id"])), 'zip', root_dir=d, base_dir=str(CONFIG["task"]["id"]))
    print_ok()

    if "shareable" in release:
        print_header("Enunciado "+release["name"])
        shareable = release["shareable"]

        print_check("Criando diretório")
        dshare = os.path.join(d, "enunciado_" + str(CONFIG["task"]["id"]))
        os.mkdir(dshare)
        print_ok()

        print_check("Copiando testes")
        dt = os.path.join(dshare, "testes")
        os.mkdir(dt)
        if "open_tests" in shareable and shareable["open_tests"]:
            for filename in tests["open"]:
                shutil.copy(os.path.join(tmpdir, "tests", "arq" + filename + ".in"), dt)
                shutil.copy(os.path.join(tmpdir, "tests", "arq" + filename + ".out"), dt)
                shutil.copy(os.path.join(tmpdir, "tests", "arq" + filename + ".err"), dt)
        if "hidden_tests" in shareable and shareable["hidden_tests"]:
            for filename in tests["hidden"]:
                shutil.copy(os.path.join(tmpdir, "tests", "arq" + filename + ".in"), dt)
                shutil.copy(os.path.join(tmpdir, "tests", "arq" + filename + ".out"), dt)
                shutil.copy(os.path.join(tmpdir, "tests", "arq" + filename + ".err"), dt)
        print_ok()

        if "aux" in shareable and shareable["aux"]:
            print_check("Copiando Aux")
            saux = os.path.join(workdir, "aux")
            daux = os.path.join(dshare, "aux")
            os.mkdir(daux)
            if os.path.isdir(saux):
                for filename in os.listdir(saux):
                    shutil.copy(os.path.join(saux, filename), daux)
            for lang, L in Langs.items():
                if L.config and "public" in L.config:
                    for filename in L.config["public"]:
                        shutil.copy(os.path.join(workdir, "solution", lang, filename), daux)
            print_ok()

        if "solution" in shareable and shareable["solution"]:
            print_check("Copiando solução")
            dsols = os.path.join(dshare, "solucao")
            os.mkdir(dsols)
            for lang, L in Langs.items():
                dsols2 = os.path.join(dsols, lang)
                os.mkdir(dsols2)
                L.copy(dsols2)
            print_ok()

        if "description" in shareable and shareable["description"]:
            print_check("Copiando HTML")
            desc = open(os.path.join(dshare, "enunciado.html"), "w")
            desc.writelines(rhtml)
            desc.close()
            for img in imgs:
                shutil.copy(os.path.join(workdir, img), dshare)
            print_ok()

        if "md" in shareable and shareable["md"]:
            print_check("Copiando Markdown")
            shutil.copy(os.path.join(workdir, "enunciado.md"), dshare)
            print_ok()


        print_check("Compactando")
        shutil.make_archive(os.path.join(rdirr, "enunciado_" + str(CONFIG["task"]["id"])), 'zip', root_dir=d, base_dir="enunciado_" + str(CONFIG["task"]["id"]))
        print_ok()
